策略模式 (Strategy Pattern)：
定义一系列的算法，把他们单独封装，并且使他们可以相互替换。重心不是如何实现算法，而是组织、调用这些算法，从而让程序具有更好的维护性和扩展性。
运行期间，策略模式在每一个时刻都只能使用一个具体的策略实现对象，代码结构使用抽象类来实现，不能使用接口，因为大多数情况下，不同的具体策略会有一个公共行为。
这时候，需要将这些公共行为放到共同的抽象角色中。
这是一个典型的将代码向继承等级结构的上方集中的标准做法
优点：使用策略模式可以避免使用多重条件语句(if-else)。多重条件语句将采取哪一种算法(行为)的逻辑和算法(行为)的逻辑耦合在一起，是一种比继承更原始和落后的代码模式。
缺点：策略模式的前提是客户端必须知道所有的策略(理解这些算法的区别)，从而自行决定使用哪一种策略类。

本案例模拟商场购物的场景，业务需求需要对不同的会员提供对应的折扣计算方式
①初级会员，rate = 0
②中级会员，rate = 10
③高级会员，rate = 20



